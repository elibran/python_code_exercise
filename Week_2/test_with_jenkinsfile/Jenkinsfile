pipeline {
  agent any
  options {
    timestamps()
    ansiColor('xterm')
  }
  stages {
    stage('Checkout') {
      steps { checkout scm }
    }
    stage('Setup Python') {
      steps {
        script {
          if (isUnix()) {
            sh 'python3 --version || python --version || true'
            sh 'pip3 --version || pip --version || true'
          } else {
            bat 'python --version'
            bat 'pip --version'
          }
        }
      }
    }
    stage('Install deps') {
      steps {
        script {
          if (isUnix()) {
            sh '''
              python3 -m venv venv
              . venv/bin/activate
              pip install --upgrade pip
              pip install -r requirements.txt
            '''
          } else {
            bat '''
              python -m venv venv
              call venv\\Scripts\\activate.bat
              python -m pip install --upgrade pip
              pip install -r requirements.txt
            '''
          }
        }
      }
    }
    stage('Test') {
      steps {
        script {
          if (isUnix()) {
            sh '''
              . venv/bin/activate
              pytest -q --cov=banking --cov-report=term-missing --cov-report=xml:reports/coverage.xml --junitxml=reports/junit.xml
            '''
          } else {
            bat '''
              call venv\\Scripts\\activate.bat
              pytest -q --cov=banking --cov-report=term-missing --cov-report=xml:reports\\coverage.xml --junitxml=reports\\junit.xml
            '''
          }
        }
      }
    }
  }
  post {
    always {
      junit allowEmptyResults: true, testResults: 'reports/junit.xml'
      archiveArtifacts artifacts: 'reports/**', fingerprint: true, allowEmptyArchive: true
      cleanWs()
    }
    success { echo 'Pipeline succeeded!' }
    failure { echo 'Pipeline failed!' }
  }
}
